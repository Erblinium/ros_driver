#!/usr/bin/env python3
import sys

import ensenso_camera.ros2 as ros2py

from geometry_msgs.msg import Pose, Point, Quaternion

CalibrateWorkspace = ros2py.import_action("ensenso_camera_msgs", "CalibrateWorkspace")


def _main(node_name):
    node = ros2py.create_node(node_name, args=sys.argv)

    parameter_set = ros2py.get_param(node, "parameter_set", "")
    timeout = ros2py.get_param(node, "timeout", 60)

    calibrate_workspace_client = ros2py.create_action_client(node, "calibrate_workspace", CalibrateWorkspace)
    ros2py.wait_for_server(node, calibrate_workspace_client, timeout_sec=timeout)

    goal = CalibrateWorkspace.Goal()
    goal.parameter_set = parameter_set
    goal.number_of_shots = 10
    goal.defined_pattern_pose = Pose(Point(0, 0, 0), Quaternion(0, 0, 0, 1))

    response = ros2py.send_action_goal(node, calibrate_workspace_client, goal)
    if not response.successful():
        node.get_logger().warn("Action was not successful.")
        return

    result = response.get_result()
    if result.error.code != 0:
        node.get_logger().error(ros2py.format_error(result.error, "Error while performing the workspace calibration!"))
    elif result.successful:
        node.get_logger().info("Successfully calibrated the workspace.")
    else:
        node.get_logger().error("Could not calibrate the workspace. Can the camera see a pattern?")


def main():
    ros2py.wrap_main_function(_main, "ensenso_camera_set_origin")


if __name__ == "__main__":
    main()
